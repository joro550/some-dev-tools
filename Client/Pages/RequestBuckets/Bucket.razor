@page "/RequestBucket/Create/{id?}"
@using DevTools.Shared

@inject HttpClient Http;
@inject IClipboard Clipboard;
@inject NavigationManager Navigation;

<h1 class='mb-6 text-4xl font-bold tracking-tight leading-none text-gray-900 md:text-5xl lg:text-6xl dark:text-white'>
    Request Bucket
</h1>

<p class='mb-14 font-normal text-gray-500 dark:text-white'>
    These request buckets are saved in memory (at the moment) so they may dissapear randomly 
</p>

@if (string.IsNullOrEmpty(Id))
{
    <button @onclick='Create' class='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
        Create
    </button>
}

@if (!string.IsNullOrEmpty(Id))
{
    <div class='relative z-0 mb-6 w-full group'>
        <input @bind='_url' readonly @bind:event='oninput' type="text" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" "/>
        <label class='peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6'>
            Address to send requests
        </label>
    </div>
    <div class="flex">
        <button @onclick='Refresh' class='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
            Refresh
        </button>
        
        <button @onclick='async () => await Clipboard.CopyText(_url)' class='ml-3 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
            Copy address
        </button>
    </div>
    @if (_requests.Any())
    {
        @foreach (var request in _requests)
        {
            <RequestComponent Request='request' />
        }
    }
}

@code {

    [Parameter]
    public string? Id { get; set; }

    private string _url = string.Empty;
    private List<CustomHttpRequest> _requests = new();

    private async Task Create()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/bucket",
                new CreateBucketRequest());

            var responseMessage = await response.Content.ReadFromJsonAsync<CreateBucketResponse>();
            Navigation.NavigateTo($"/RequestBucket/Create/{responseMessage!.Id}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    protected override Task OnParametersSetAsync()
    {
        _url = $"{Http.BaseAddress}api/{Id}/request";
        return base.OnParametersSetAsync();
    }

    private async Task Refresh()
    {
        var response = await Http.GetFromJsonAsync<List<CustomHttpRequest>>($"api/bucket/{Id}");
        if (response != null)
        {
            _requests = response;
        }
    }
}