@page "/Generator/Csv"
@using CsvHelper
@using System.Globalization
@using System.Dynamic
@using System.Text
@using Bogus.DataSets
@using DevTools.Client.Data
@using DevTools.Client.Pages.DataComponents
@using Microsoft.AspNetCore.Components
@inject IJSRuntime Js

<h1 class='mb-6 text-4xl font-bold tracking-tight leading-none text-gray-900 md:text-5xl lg:text-6xl dark:text-white'>
    Csv Generator
</h1>

<p class='mb-8 font-normal text-gray-500 dark:text-white'>
    This page is being powered by an open source liraries: 
</p>

<ul class='list-disc mb-8 font-normal text-gray-500 dark:text-white'>
    <li><a target='_blank' class='text-blue-200' href='https://github.com/bchavez/Bogus'>Bogus</a></li>
    <li><a target='_blank' class='text-blue-200' href='https://github.com/JoshClose/CsvHelper'>CsvHelper</a></li>
</ul>

<div class='relative z-0 mb-6 w-full group'>
  <input @bind='_amountToGenerate' max='1000' type='number' class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " />
  <label class='peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6'>
      Number of columns to generate
  </label>
</div>

<button @onclick='Add' class='mb-3 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
    Add
</button>

<button @onclick='DownloadFileFromStream' class='mb-3  text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
    Generate
</button>

<div class="mt-3 overflow-x-auto relative  rounded-lg w-screen">
    <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-900 dark:text-gray-400">
            <tr>
                <th scope="col" class="w-2 py-3 px-6">
                </th>
                <th scope="col" class="py-3 px-6">
                    Name
                </th>
                <th scope="col" class="py-3 px-6">
                    Type
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var column in _columns)
            {
                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                    <th scope="row" class="w-2 py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                        <button @onclick='() => Remove(column)' class='mb-3 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
                            Remove
                        </button>
                    </th>
                    
                    <th scope="row" class="py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                        <div class='relative z-0 mb-6 w-full group'>
                            <input @bind='column.Name' @bind:event='oninput' type="text" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" "/>
                            <label class='peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6'>Input</label>
                        </div>
                    </th>
                    
                    <td class="py-4 px-6">
                        <div class='relative z-0 mb-6 w-full group'>
                            <label class="block mb-3 text-sm font-medium text-gray-900 dark:text-white">Type</label>
                            <select @bind='column.Type' class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">
                                @foreach (var dataType in Enum.GetValues<DataType>())
                                {
                                    <option value='@dataType'>@dataType</option>
                                }
                            </select>
                            
                            <div class='mt-3'>
                                <DynamicComponent @ref="column.Component" Type="@GetTypeFor(column.Type)" />
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private readonly List<GeneratorModel> _columns = new();
    private int _amountToGenerate = 0;

    private void Add() 
        => _columns.Add(new GeneratorModel(string.Empty, DataType.Guid));

    private string Generate()
    {
        var records = new List<dynamic>();
        
        for (var i = 0; i < _amountToGenerate; i++)
        {
            var record = new ExpandoObject();
            foreach (var column in _columns)
            {
                record.TryAdd(column.Name, column.GetData());
            }
            records.Add(record);
        }

        using var writer = new StringWriter();
        using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);

        csv.WriteRecords(records);

        return writer.ToString();
    }

    private async Task DownloadFileFromStream()
    {
        var fileContent = Generate();
        var fileName = $"{DateTime.UtcNow:s}.csv";
        var stream = new MemoryStream(Encoding.UTF8.GetBytes(fileContent));

        using var streamRef = new DotNetStreamReference(stream: stream);
        await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private void Remove(GeneratorModel column) => _columns.Remove(column);

    private static Type GetTypeFor(DataType columnType)
    {
        return columnType switch
        {
            DataType.Lorem => typeof(LoremDataGenerator),
            DataType.FirstName => typeof(NameDataGenerator),
            DataType.LastName => typeof(LastNameDataGenerator),
            DataType.Email => typeof(EmailDataGenerator),
            DataType.DateOfBirth => typeof(DateOfBirthDataGenerator),
            DataType.UserName => typeof(UsernameDataGenerator),
            DataType.Number => typeof(NumberDataGenerator),
            _ => typeof(GuidDataGenerator)
        };
    }

}