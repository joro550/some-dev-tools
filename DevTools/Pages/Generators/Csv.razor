@page "/Generator/Csv"
@using CsvHelper
@using System.Globalization
@using System.Dynamic
@using Bogus.DataSets
@inject IJSRuntime Js
<h3>Csv</h3>

<button @onclick='Add' type='submit' class='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
    Add
</button>

<button @onclick='DownloadFileFromStream' type='submit' class='text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800'>
    Generate
</button>

<div class="mt-3 overflow-x-auto relative  rounded-lg">
    <table class="w-full text-sm text-left text-gray-500 dark:text-gray-400">
        <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-900 dark:text-gray-400">
            <tr>
                <th scope="col" class="py-3 px-6">
                    Name
                </th>
                <th scope="col" class="py-3 px-6">
                    Type
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var column in _columns)
            {
                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                    <th scope="row" class="py-4 px-6 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                        <div class='relative z-0 mb-6 w-full group'>
                            <input @bind='column.Name' @bind:event='oninput' type="text" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " />
                            <label class='peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6'>Input</label>
                        </div>
                    </th>
                    <td class="py-4 px-6">
                        <div class='relative z-0 mb-6 w-full group'>
                            <input @bind='column.Type' @bind:event='oninput' type="text" class="block py-2.5 px-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer" placeholder=" " />
                            <label class='peer-focus:font-medium absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 -z-10 origin-[0] peer-focus:left-0 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6'>Input</label>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>


@code {
    private readonly List<CsvGeneratorModel> _columns = new();

    private void Add() 
        => _columns.Add(new CsvGeneratorModel(string.Empty, string.Empty));

    private Stream Generate()
    {
        var lorem = new Lorem();
        var records = new List<dynamic>();

        foreach (var column in _columns)
        {
            var record = new ExpandoObject();
            record.TryAdd(column.Name, lorem.Word());
            records.Add(record);
        }
        
        var stringStream = new MemoryStream();
        var csv = new CsvWriter(new StreamWriter(stringStream), CultureInfo.InvariantCulture);

        csv.WriteRecords(records);
        
        stringStream.Position = 0;
        return stringStream;
    }

    private async Task DownloadFileFromStream()
    {
        await using var fileStream = Generate();
        var fileName = $"{DateTime.UtcNow:s}.csv";

        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    public class CsvGeneratorModel
    {
        public CsvGeneratorModel(string name, string type)
        {
            Name = name;
            Type = type;
        }
        
        public string Name { get; set; }
        public string Type { get; set; }
    };
}